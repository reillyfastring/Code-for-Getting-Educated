#include <FEHLCD.h>
#include <FEHUtility.h>
#include <time.h>
#include <math.h>

#define screenHeight 240
#define screenWidth 320

void game(float *ptr);
void statistics(float *ptr);
void instructions(float *ptr);
void credits(float *ptr);
void makelvl(float *ptr, float *ptr1);


int main(void)
{

   bool p = true;
   int xadress, yadress;
   float gametrue = 0, stattrue = 0, instructtrue = 0, creditstrue = 0;
   float* gameptr = &(gametrue);
   float* statptr = &(stattrue);
   float* creditptr = &(creditstrue);
   float* instructptr = &(instructtrue);
      do {
        Sleep(.01);
        LCD.Clear();
        LCD.SetFontColor(GREEN);
        LCD.FillRectangle(10, 187, 300, 45);
        LCD.FillRectangle(10, 127, 300, 45);
        LCD.FillRectangle(10, 67, 300, 45);
        LCD.FillRectangle(10, 7, 300, 45);
        LCD.SetBackgroundColor(LIGHTBLUE);
        LCD.SetFontColor(WHITE);
        LCD.WriteAt("Play Game", 105, 200);
        LCD.WriteAt("Statistics", 100, 140);
        LCD.WriteAt("Instructions", 85, 80);
        LCD.WriteAt("Credits", 112, 20);
        LCD.Update();
        

        if (LCD.Touch(&xadress, &yadress) == true) {
            if ((xadress > 10 && xadress < 310) && (yadress < 232 && yadress > 187)) {
                gametrue = 1;
                Sleep(.25);
            }
        }

        if (LCD.Touch(&xadress, &yadress) == true) {
            if ((xadress > 10 && xadress < 310) && (yadress < 172 && yadress > 127)) {
            stattrue = 1;
            Sleep(.25);
            }
        }

        if (LCD.Touch(&xadress, &yadress) == true) {
            if ((xadress > 10 && xadress < 310) && (yadress < 112 && yadress > 67)) {
            instructtrue = 1;
            Sleep(.25);
            }
        }

        if (LCD.Touch(&xadress, &yadress) == true) {
            if ((xadress > 10 && xadress < 310) && (yadress < 52 && yadress > 7)) {
            creditstrue = 1;
            Sleep(.25);
            }
        }
        game(gameptr);
        gametrue = 0;
        statistics(statptr);
        stattrue = 0;
        instructions(instructptr);
        instructtrue = 0;
        credits(creditptr);
        creditstrue = 0;

   } while (p == true);
}

void game(float *gameprt) {
    while (*gameprt == 1) {



        //variables
        int t = 0, samecheck, counter = 0;
        float makelvltrue = 0, matrix2[25], distance, b, c, f = 0, minN, g, h;
        float *mat1ptr;
        float *makelvlptr = &makelvltrue;
        bool e = false, z = false;
        
        float matrix1[500][2] = {113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 239.000000, 113.000000, 238.000000, 113.000000, 238.000000, 113.000000, 237.000000, 113.000000, 236.000000, 113.000000, 236.000000, 113.000000, 235.000000, 113.000000, 235.000000, 113.000000, 235.000000, 113.000000, 234.000000, 113.000000, 234.000000, 113.000000, 234.000000, 113.000000, 234.000000, 113.000000, 233.000000, 113.000000, 233.000000, 113.000000, 233.000000, 113.000000, 232.000000, 113.000000, 232.000000, 113.000000, 232.000000, 113.000000, 231.000000, 113.000000, 231.000000, 113.000000, 231.000000, 113.000000, 230.000000, 113.000000, 230.000000, 113.000000, 229.000000, 113.000000, 229.000000, 113.000000, 228.000000, 114.000000, 228.000000, 114.000000, 227.000000, 114.000000, 227.000000, 114.000000, 226.000000, 114.000000, 226.000000, 114.000000, 226.000000, 114.000000, 225.000000, 114.000000, 225.000000, 114.000000, 
            224.000000, 114.000000, 224.000000, 114.000000, 223.000000, 115.000000, 223.000000, 115.000000, 222.000000, 115.000000, 222.000000, 115.000000, 221.000000, 115.000000, 220.000000, 115.000000, 220.000000, 115.000000, 219.000000, 116.000000, 219.000000, 116.000000, 218.000000, 116.000000, 218.000000, 116.000000, 217.000000, 116.000000, 216.000000, 116.000000, 216.000000, 117.000000, 215.000000, 117.000000, 215.000000, 117.000000, 215.000000, 117.000000, 214.000000, 117.000000, 214.000000, 117.000000, 213.000000, 117.000000, 213.000000, 117.000000, 213.000000, 117.000000, 212.000000, 117.000000, 212.000000, 118.000000, 211.000000, 118.000000, 211.000000, 118.000000, 211.000000, 118.000000, 210.000000, 118.000000, 210.000000, 118.000000, 209.000000, 118.000000, 209.000000, 119.000000, 208.000000, 119.000000, 207.000000, 119.000000, 207.000000, 119.000000, 206.000000, 120.000000, 205.000000, 120.000000, 205.000000, 120.000000, 204.000000, 120.000000, 204.000000, 121.000000, 203.000000, 121.000000, 202.000000, 121.000000, 202.000000, 121.000000, 201.000000, 122.000000, 200.000000, 122.000000, 200.000000, 122.000000, 199.000000, 122.000000, 199.000000, 122.000000, 199.000000, 123.000000, 198.000000, 123.000000, 198.000000, 123.000000, 197.000000, 
            123.000000, 196.000000, 124.000000, 196.000000, 124.000000, 195.000000, 124.000000, 195.000000, 124.000000, 195.000000, 125.000000, 194.000000, 125.000000, 193.000000, 125.000000, 193.000000, 126.000000, 192.000000, 126.000000, 192.000000, 126.000000, 191.000000, 127.000000, 191.000000, 127.000000, 190.000000, 128.000000, 190.000000, 128.000000, 189.000000, 129.000000, 189.000000, 129.000000, 188.000000, 129.000000, 188.000000, 130.000000, 188.000000, 130.000000, 187.000000, 131.000000, 187.000000, 131.000000, 187.000000, 132.000000, 186.000000, 132.000000, 186.000000, 133.000000, 186.000000, 133.000000, 185.000000, 134.000000, 185.000000, 135.000000, 185.000000, 136.000000, 184.000000, 137.000000, 184.000000, 137.000000, 184.000000, 138.000000, 183.000000, 138.000000, 183.000000, 139.000000, 183.000000, 139.000000, 183.000000, 140.000000, 183.000000, 141.000000, 182.000000, 142.000000, 182.000000, 143.000000, 182.000000, 144.000000, 181.000000, 146.000000, 181.000000, 147.000000, 181.000000, 148.000000, 181.000000, 149.000000, 180.000000, 150.000000, 180.000000, 151.000000, 180.000000, 152.000000, 180.000000, 152.000000, 180.000000, 153.000000, 180.000000, 154.000000, 179.000000, 155.000000, 179.000000, 156.000000, 179.000000, 157.000000, 
            179.000000, 158.000000, 179.000000, 159.000000, 179.000000, 160.000000, 179.000000, 161.000000, 179.000000, 161.000000, 179.000000, 162.000000, 178.000000, 163.000000, 178.000000, 164.000000, 178.000000, 165.000000, 178.000000, 165.000000, 178.000000, 167.000000, 178.000000, 168.000000, 177.000000, 168.000000, 177.000000, 169.000000, 177.000000, 170.000000, 177.000000, 171.000000, 177.000000, 172.000000, 177.000000, 173.000000, 176.000000, 174.000000, 176.000000, 174.000000, 176.000000, 175.000000, 176.000000, 175.000000, 176.000000, 176.000000, 176.000000, 177.000000, 176.000000, 177.000000, 175.000000, 178.000000, 175.000000, 179.000000, 175.000000, 179.000000, 175.000000, 180.000000, 175.000000, 181.000000, 174.000000, 182.000000, 174.000000, 182.000000, 174.000000, 183.000000, 174.000000, 183.000000, 174.000000, 184.000000, 173.000000, 185.000000, 173.000000, 185.000000, 173.000000, 186.000000, 173.000000, 187.000000, 172.000000, 188.000000, 172.000000, 188.000000, 172.000000, 189.000000, 171.000000, 190.000000, 171.000000, 191.000000, 171.000000, 191.000000, 171.000000, 191.000000, 170.000000, 192.000000, 170.000000, 192.000000, 170.000000, 192.000000, 170.000000, 193.000000, 170.000000, 193.000000, 169.000000, 194.000000, 169.000000, 
            194.000000, 168.000000, 195.000000, 168.000000, 195.000000, 168.000000, 195.000000, 167.000000, 196.000000, 167.000000, 196.000000, 167.000000, 197.000000, 166.000000, 197.000000, 166.000000, 198.000000, 165.000000, 199.000000, 165.000000, 199.000000, 164.000000, 200.000000, 164.000000, 200.000000, 163.000000, 201.000000, 162.000000, 201.000000, 162.000000, 202.000000, 161.000000, 203.000000, 161.000000, 203.000000, 160.000000, 204.000000, 160.000000, 204.000000, 160.000000, 204.000000, 159.000000, 205.000000, 159.000000, 205.000000, 159.000000, 205.000000, 158.000000, 206.000000, 158.000000, 206.000000, 157.000000, 206.000000, 157.000000, 207.000000, 156.000000, 207.000000, 156.000000, 208.000000, 155.000000, 208.000000, 155.000000, 209.000000, 154.000000, 209.000000, 154.000000, 209.000000, 153.000000, 210.000000, 153.000000, 210.000000, 152.000000, 211.000000, 152.000000, 211.000000, 151.000000, 211.000000, 151.000000, 211.000000, 151.000000, 212.000000, 150.000000, 212.000000, 150.000000, 212.000000, 150.000000, 212.000000, 150.000000, 212.000000, 150.000000, 212.000000, 150.000000, 213.000000, 149.000000, 213.000000, 149.000000, 213.000000, 149.000000, 213.000000, 149.000000, 213.000000, 149.000000, 213.000000, 148.000000, 214.000000, 
            148.000000, 214.000000, 148.000000, 214.000000, 148.000000, 214.000000, 148.000000, 214.000000, 147.000000, 215.000000, 147.000000, 215.000000, 147.000000, 215.000000, 146.000000, 216.000000, 146.000000, 216.000000, 145.000000, 216.000000, 145.000000, 217.000000, 144.000000, 217.000000, 143.000000, 218.000000, 143.000000, 218.000000, 142.000000, 218.000000, 142.000000, 219.000000, 142.000000, 219.000000, 141.000000, 219.000000, 141.000000, 219.000000, 140.000000, 220.000000, 140.000000, 220.000000, 140.000000, 220.000000, 139.000000, 220.000000, 139.000000, 220.000000, 139.000000, 221.000000, 139.000000, 221.000000, 139.000000, 221.000000, 139.000000, 221.000000, 138.000000, 221.000000, 138.000000, 221.000000, 138.000000, 221.000000, 138.000000, 222.000000, 137.000000, 222.000000, 137.000000, 222.000000, 137.000000, 222.000000, 136.000000, 223.000000, 135.000000, 223.000000, 135.000000, 224.000000, 134.000000, 224.000000, 134.000000, 224.000000, 133.000000, 224.000000, 133.000000, 225.000000, 132.000000, 225.000000, 132.000000, 225.000000, 131.000000, 226.000000, 131.000000, 226.000000, 130.000000, 226.000000, 130.000000, 226.000000, 129.000000, 227.000000, 129.000000, 227.000000, 129.000000, 227.000000, 128.000000, 228.000000, 128.000000, 
            228.000000, 127.000000, 228.000000, 127.000000, 229.000000, 126.000000, 229.000000, 125.000000, 229.000000, 125.000000, 230.000000, 124.000000, 230.000000, 124.000000, 230.000000, 123.000000, 231.000000, 123.000000, 231.000000, 122.000000, 231.000000, 122.000000, 232.000000, 122.000000, 232.000000, 121.000000, 232.000000, 121.000000, 233.000000, 120.000000, 233.000000, 120.000000, 233.000000, 120.000000, 233.000000, 119.000000, 233.000000, 119.000000, 234.000000, 119.000000, 234.000000, 119.000000, 234.000000, 118.000000, 234.000000, 118.000000, 234.000000, 118.000000, 235.000000, 117.000000, 235.000000, 117.000000, 235.000000, 117.000000, 236.000000, 116.000000, 236.000000, 115.000000, 237.000000, 115.000000, 237.000000, 114.000000, 238.000000, 114.000000, 238.000000, 113.000000, 238.000000, 113.000000, 239.000000, 113.000000, 239.000000, 112.000000, 239.000000, 112.000000, 240.000000, 111.000000, 240.000000, 111.000000, 240.000000, 111.000000, 241.000000, 110.000000, 241.000000, 110.000000, 241.000000, 110.000000, 241.000000, 110.000000, 241.000000, 109.000000, 242.000000, 109.000000, 242.000000, 109.000000, 242.000000, 108.000000, 243.000000, 108.000000, 243.000000, 108.000000, 244.000000, 107.000000, 244.000000, 107.000000, 244.000000, 
            106.000000, 245.000000, 106.000000, 245.000000, 106.000000, 245.000000, 105.000000, 246.000000, 105.000000, 246.000000, 104.000000, 247.000000, 104.000000, 247.000000, 104.000000, 247.000000, 103.000000, 248.000000, 103.000000, 248.000000, 103.000000, 248.000000, 102.000000, 249.000000, 102.000000, 249.000000, 102.000000, 250.000000, 101.000000, 250.000000, 101.000000, 251.000000, 100.000000, 252.000000, 100.000000, 252.000000, 99.000000, 253.000000, 99.000000, 254.000000, 98.000000, 255.000000, 98.000000, 255.000000, 97.000000, 256.000000, 96.000000, 257.000000, 96.000000, 258.000000, 95.000000, 258.000000, 95.000000, 259.000000, 95.000000, 259.000000, 94.000000, 260.000000, 94.000000, 260.000000, 94.000000, 261.000000, 93.000000, 261.000000, 93.000000, 262.000000, 93.000000, 262.000000, 92.000000, 263.000000, 92.000000, 263.000000, 92.000000, 264.000000, 91.000000, 265.000000, 91.000000, 265.000000, 91.000000, 266.000000, 90.000000, 267.000000, 90.000000, 267.000000, 90.000000, 268.000000, 89.000000, 269.000000, 89.000000, 270.000000, 88.000000, 271.000000, 88.000000, 273.000000, 87.000000, 275.000000, 86.000000, 276.000000, 86.000000, 277.000000, 85.000000, 278.000000, 85.000000, 279.000000, 85.000000, 280.000000, 84.000000, 281.000000, 
            84.000000, 282.000000, 84.000000, 283.000000, 83.000000, 283.000000, 83.000000, 284.000000, 83.000000, 285.000000, 82.000000, 286.000000, 82.000000, 287.000000, 82.000000, 288.000000, 82.000000, 288.000000, 82.000000, 289.000000, 81.000000, 289.000000, 81.000000, 289.000000, 81.000000, 289.000000, 81.000000, 289.000000, 81.000000, 290.000000, 81.000000, 290.000000, 81.000000, 290.000000, 81.000000, 290.000000, 81.000000, 291.000000, 81.000000, 291.000000, 81.000000, 291.000000, 81.000000, 292.000000, 80.000000, 292.000000, 80.000000, 293.000000, 80.000000, 293.000000, 80.000000, 293.000000, 80.000000, 294.000000, 80.000000, 294.000000, 80.000000, 295.000000, 80.000000, 295.000000, 80.000000, 295.000000, 79.000000, 296.000000, 79.000000, 296.000000, 79.000000, 297.000000, 79.000000, 298.000000, 79.000000, 298.000000, 79.000000, 299.000000, 79.000000, 300.000000, 79.000000, 301.000000, 79.000000, 301.000000, 79.000000, 302.000000, 78.000000, 304.000000, 78.000000, 306.000000, 78.000000, 309.000000, 78.000000, 312.000000, 77.000000, 314.000000, 77.000000, 317.000000, 76.000000, 319.000000, 76.000000};
            mat1ptr = &matrix1[0][0];

        
        //predefined variables
        float gravity = 0, vy = 0, vx = 6, a = 0, yi = 50, xi = 280, p = 0, fps = 164, radius = 5, xdamp = .75;
        float ydamp = .75, yxdamp = .9, xydamp = .9 ,ballStopThreshold = 0.1, velocitydampen = 4, maxXlaunchV = 7, maxYlaunchV = 7, firstT = 0;

        //undefined variables
        float x_position, y_position, xposi, yposi, xposf, yposf, vxlaunch, vylaunch, sleepVar, rx, ry, totalTime, lastT, speed;
        time_t startime, endtime;



        //constants
        //making gravity stay constant with different fps
        gravity = (1/fps)*20; //11.475
        sleepVar = 1/fps;
        
        

        //main while loop
        while (t == 0) {

            //printf("////////////////////////");
            //makelvl(mat1ptr, makelvlptr);
            
            //Starts time of run
            //startime = clock();



            //drawing map
            LCD.SetFontColor(RED);
            //clears screen
            LCD.Clear();
            //makelvl(mat1ptr);
            for (int i = 0; i<500; i++) {
                LCD.DrawPixel(*(mat1ptr+2*i), *(mat1ptr+2*i+1));
            }

            //draws the x in top left corner
            LCD.SetFontColor(RED);
            LCD.DrawLine(1, 6, 6, 1);
            LCD.DrawLine(1, 1, 6, 6);
           // LCD.WriteAt((int)vx, 10, 50);


            //draws the circle
            LCD.SetFontColor(GREEN);
            LCD.FillCircle(xi ,yi ,radius);

            //background color
            LCD.SetBackgroundColor(LIGHTBLUE);



            //essentially frames/second
            Sleep(sleepVar);
            //Sleep(1000);


            //exits game
            if (LCD.Touch(&x_position, &y_position) == true) {
                if (x_position < 5 && y_position < 5) {
                        *gameprt = 0;
                        t = 1;
                    }
            }
            



            //collision
            //bottom screen collision
            if (((yi >= (screenHeight - radius)) || (yi >= ((screenHeight - radius) - vy))) && vy > 0) {
                vy = (-1.0*ydamp*vy);
                vx = (yxdamp*vx);
            }

            //top screen collision
            if ((yi <= radius || yi <= (radius-vy)) && (vy < 0)) {
                vy = (-1.0*ydamp*vy);
                vx = (yxdamp*vx);
            }

            //right screen collision
            if (xi >= (screenWidth-radius) || xi >= (screenWidth-radius-vx) && vx > 0) {
                vx = (-1.0*xdamp*vx);
                vy = (xydamp*vy);
            }

            //left screen collision
            if (xi <= radius || xi <= (radius-vx) && vx < 0) {
                vx = (-1.0*xydamp*vx);
                vy = (xydamp*vy);
            }
            //initial ground detection
            for (int j = 0; j<25; j++) {
                b = *(mat1ptr+40*j);
                c = *(mat1ptr+40*j+1);
                //printf("b: %f, c: %f", b, c);
                distance = sqrt(pow((xi-b),2)+pow((yi-c),2));
                matrix2[j] = distance;
                //printf("check1, distnace: %f\n", distance);
            }
            //checking if close
            speed = sqrt(pow(vx, 2)+pow(vy, 2));
            minN = 100;
            for (int k = 0; k < 25; k++) {
                //printf("check2, minN: %f, distance: %f\n", minN, matrix2[k]);
                if (matrix2[k] < minN) {
                    minN = matrix2[k];
                    samecheck = k;
                }
            }
            if (minN < 8*speed) {
                e = true;   
                //printf("samecheck: %d\n" , samecheck);
                //printf("check3, e: %d\n", e);
            }
            //closing in on pixel
            if (e == true) {
                f++;
                //printf("check4, f: %f\n", f);
                e = false;
            }
            //changing speed
            if (f >= 3) {
                //printf("check5\n");
                for (int l = 0; l < 20; l++) {
                    g = *(mat1ptr+40*samecheck-20+2*l);
                    h = *(mat1ptr+40*samecheck-20+2*l+1);
                    distance = sqrt(pow((xi-g),2)+pow((yi-h),2));
                    //printf("distance: %f, speed: %f, g: %f, h: %f, maincoordx: %f, maincoordy: %f, ballx: %f, bally: %f, f: %f\n", distance, speed, g, h, *(mat1ptr+40*samecheck), *(mat1ptr+40*samecheck+1), xi, yi, f);
                    if (distance <= speed) {
                        z = true;
                        //printf("check6\n");
                    }
                }
            }

            if (z == true) {
                vx = -1*vx*xdamp;
                vy = -1*vy*ydamp;
                z = false;
                f = 0;
            }
            /*
            if (counter > 3) {
                f = 0;
                counter = 0;
            }
            else {
                counter++;
            }
            */
            //calculates x and y components of speed
            ry = abs(vy);
            
            //makes the ball stop moving once it gets below a certain speed in both components, and near bottom of screen (so it doesnt stall when going from up to down)
            if ((ry < ballStopThreshold) && (yi >= screenHeight - 10)) {
                vy = 0;
                vx = 0;
                yi = screenHeight - 6;
            }
            //keeps the ball under effects of gravity otherwise  
            else {
            vy += gravity;
            }

            //changes position of circle by velocity for next frame
            yi += vy;
            xi += vx;

            //counter for if statement below making it not stall at beginning of game when both components of velocity are 0.
            p += 1;

            //if statement that detects when the player starts to click and hold mouse if the ball isn't moving and a small amount of time has passed
            if(LCD.Touch(&x_position, &y_position) == true && vy == 0 && vx == 0 && p > 15){

                //saves first position of mouse
                xposi = x_position;
                yposi = y_position;

            
                
                //keeps detecting position of mouse until the user stops clicking and then saves final position
                while(LCD.Touch(&x_position, &y_position) == true){
                    xposf = x_position;
                    yposf = y_position;
                }
                //logging initial and final positions for testing
                //printf("The initial coordinates were %f, %f\n", xposi, yposi);
                //printf("The final coordinates were %f, %f\n", xposf, yposf);
                //

                //makes the velocity a factor of the distance          
                vxlaunch = ((xposi - xposf)/velocitydampen);
                vylaunch = ((yposi - yposf)/velocitydampen);

                //more statistics about recorded velocity and actual velocity
                //printf("vxlaunch: %f\n", vxlaunch);
                //printf("vylaunch: %f\n", vylaunch);
                //printf("vx before: %f\n", vx);
                //printf("vy before: %f\n", vy);
                //

                //sets radius from original point that the velocity maxes out
                //if velocity is over max, reduce it down to max
                if(abs(vxlaunch) >= maxXlaunchV){
                    vx += (maxXlaunchV*(vxlaunch/abs(vxlaunch)));
                }

                //if not then keep it the same
                else{
                    vx += vxlaunch;
                }

                //if velocity is over max, reduce it down to max
                if(abs(vylaunch) >= maxYlaunchV){
                    vy += (maxYlaunchV*(vylaunch/abs(vylaunch)));
                }

                //if not then keep it the same
                else{
                    vy += vylaunch;
                }

                //states actual velocities being added to the ball
                //printf("vx after: %f\n", vx);
                //printf("vy after: %f\n", vy);
                //   
                
            }

          
        //updates screen

        LCD.Update();
        //Calculates time in between runs
        //endtime = clock();
        //double totalTime = ((double)endtime)/CLOCKS_PER_SEC; 
        //lastT = firstT - totalTime;
        //firstT = totalTime;
        //printf("endtime: %f\n", lastT);
        
        }
    }
}

void statistics(float *statptr) {
    if (*statptr == 1) {
        int t = 1, xadress, yadress;
        while (t == 1) {
            LCD.Clear();
            LCD.SetFontColor(GREEN);
            LCD.FillRectangle(10, 185, 300, 45);
            LCD.SetBackgroundColor(LIGHTBLUE);
            LCD.SetFontColor(WHITE);
            LCD.WriteAt("Back", 130, 198);
            LCD.WriteAt("Max Height: ", 5, 10);
            LCD.WriteAt("Number of Summits: ", 5, 40);
            LCD.WriteAt("Shortest Summit Time: ", 5, 70);
            LCD.WriteAt("Longest Fall: ", 5, 100);
            LCD.Update();
            Sleep(.01);
            if (LCD.Touch(&xadress, &yadress) == true) {
                if ((xadress > 10 && xadress < 310) && (yadress < 230 && yadress > 185)) {
                t = 0;
                Sleep(.25);
                }
            }
        }
    }
}

void instructions(float *instructptr) {
    if (*instructptr == 1) {
        int t = 1, xadress, yadress;
        while (t == 1) {
            LCD.Clear();
            LCD.SetFontColor(GREEN);
            LCD.FillRectangle(10, 185, 300, 45);
            LCD.SetBackgroundColor(LIGHTBLUE);
            LCD.SetFontColor(WHITE);
            LCD.WriteAt("Back", 130, 198);
            LCD.WriteAt("Just get to the top. No", 15, 10);
            LCD.WriteAt("one said it would be easy.", 5, 40);
            LCD.WriteAt("Touch and hold to launch.", 10, 70);
            LCD.WriteAt("Some parts are more", 40, 100);
            LCD.WriteAt("slippery than others.", 35, 130);
            LCD.WriteAt("Don't fall!", 85, 160);
            LCD.Update();
            Sleep(.01);
            if (LCD.Touch(&xadress, &yadress) == true) {
                if ((xadress > 10 && xadress < 310) && (yadress < 230 && yadress > 185)) {
                t = 0;
                Sleep(.25);
                }
            }
        }
    }
}

void credits(float *creditsptr) {
    if (*creditsptr == 1) {
        int t = 1, xadress, yadress;
        while (t == 1) {
            LCD.Clear();
            LCD.SetFontColor(GREEN);
            LCD.FillRectangle(10, 185, 300, 45);
            LCD.SetBackgroundColor(LIGHTBLUE);
            LCD.SetFontColor(WHITE);
            LCD.WriteAt("Back", 130, 198);
            LCD.WriteAt("\"Getting Over it Lyte\" was", 5, 10);
            LCD.WriteAt("created by Reilly Fastring", 5, 40);
            LCD.WriteAt("and Cameron Arnold.", 50, 70);
            LCD.Update();
            Sleep(.01);
            if (LCD.Touch(&xadress, &yadress) == true) {
                if ((xadress > 10 && xadress < 310) && (yadress < 230 && yadress > 185)) {
                t = 0;
                Sleep(.25);
                }
            }
        }
    }
}

void makelvl(float *mat1ptr, float *makelvlptr) {
    if (*makelvlptr == 0) {
        LCD.Clear();
        int i = 0;
        float matrix1[500][2], xp, yp;
        mat1ptr = &matrix1[0][0];
        while(LCD.Touch(&xp, &yp)==true && i < 500) {
            *(mat1ptr + i) = xp;            
            *(mat1ptr + i + 1) = yp;
            i++;
            Sleep(.005);
        }
        if (i == 500) {
            *makelvlptr = 1;
            printf("done");
        }

    }

}
